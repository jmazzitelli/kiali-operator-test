# This will deploy the LDAP server and expose its service via NodePort.
# You can manually test the LDAP server access through:
# LDAPTLS_REQCERT=ALLOW ldapsearch -v -x \
#    -H ldaps://192.168.130.11:30032 \ <-- the cluster's IP and the service's NodePort
#    -D "cn=Manager,dc=example,dc=com" -w admin -b "dc=example,dc=com"
- name: Create LDAP Namespace
  k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ ldap.namespace }}"

- name: Create LDAP Deployment
  k8s:
    namespace: "{{ ldap.namespace }}"
    definition: "{{ lookup('template', ldap.deployment_file_path) }}"

- name: Create LDAP Service
  k8s:
    namespace: "{{ ldap.namespace }}"
    definition: "{{ lookup('template', ldap.service_file_path) }}"

- name: Asserting that LDAP is Deployed
  k8s_facts:
    api_version: v1
    kind: Deployment
    namespace: "{{ ldap.namespace }}"
    label_selectors:
    - app = ldap
  register: ldap_deployment
  until: ldap_deployment.resources | length == 1 and ldap_deployment.resources[0].status.availableReplicas is defined and ldap_deployment.resources[0].status.availableReplicas == 1
  retries: 60
  delay: 5

- name: Get the LDAP Service
  k8s_facts:
    api_version: v1
    kind: Service
    namespace: "{{ ldap.namespace }}"
    label_selectors:
    - app = ldap
  register: ldap_service

- set_fact:
    external_ldap_host: "{{ ldap_service.resources[0].status.loadBalancer.ingress[0].hostname }}"
    external_ldap_port: "389"
    external_ldap_port_ssl: "636"

- name: Wait for the LoadBalancer to provide the endpoint for the LDAP service which takes a long time
  wait_for:
    host: "{{ external_ldap_host }}"
    port: "{{ external_ldap_port }}"
    timeout: 300

- name: Make sure we have a parent entry for users (this tests unsecure LDAP access)
  ldap_entry:
    state: present
    dn: "ou=users,dc=example,dc=com"
    objectClass: organizationalUnit
    server_uri: "ldap://{{ external_ldap_host }}:{{ external_ldap_port }}"
    bind_dn: cn=Manager,dc=example,dc=com
    bind_pw: admin

- name: Create a simple user 'bob' (this tests secure SSL LDAP access)
  ldap_entry:
    state: present
    dn: "cn=bob,ou=users,dc=example,dc=com"
    objectClass:
    - simpleSecurityObject
    - organizationalRole
    attributes:
      userPassword: "bob"
    server_uri: "ldaps://{{ external_ldap_host }}:{{ external_ldap_port_ssl }}"
    validate_certs: no
    bind_dn: cn=Manager,dc=example,dc=com
    bind_pw: admin
