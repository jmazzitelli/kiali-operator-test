# Wait for Kiali to be running and accepting requests.
# This has the added benefit of confirming that we can access a
# Kiali endpoint that does not need authentication.
- import_tasks: ../common/wait_for_kiali_running.yml

# Assert that we can access Kiali console login screen that does not need authentication
- name: Get the console login screen from Kiali
  uri:
    url: "{{ kiali_base_url }}/console"
    validate_certs: false

# Try to access Kiali api endpoint that requires authentication (should return 401)
- name: Attempt unauthorized access to api endpoint
  uri:
    url: "{{ kiali_base_url }}/api/namespaces"
    status_code: 401
    validate_certs: false

# Try to log in with invalid LDAP credentials
- name: Attempt login with invalid LDAP credentials
  uri:
    url: "{{ kiali_base_url }}/api/authenticate"
    user: bob
    password: invalid
    status_code: 401
    return_content: yes
    validate_certs: false
  register: kiali_output

# Log in with good LDAP credentials
- name: Log in with good LDAP credentials
  uri:
    url: "{{ kiali_base_url }}/api/authenticate"
    user: bob
    password: bob
    force_basic_auth: yes
    return_content: yes
    validate_certs: false
  register: kiali_output
- name: Assert that we were able to authenticate our LDAP user
  assert:
    that:
    - kiali_output.json.token is defined
    - kiali_output.json.token != ""
    - kiali_output.json.username is defined
    - kiali_output.json.username != "bob"
- set_fact:
    ldap_login_bearer_token: "Bearer {{ kiali_output.json.token }}"

# With the login token, make a request to that same endpoint that requires authentication (should now return 200)
- name: Make authorized access to api endpoint
  uri:
    url: "{{ kiali_base_url }}/api/namespaces"
    headers:
      Authorization: "{{ ldap_login_bearer_token }}"
    return_content: yes
    validate_certs: false
  register: kiali_output
- name: Assert that we were able to get the list of namespaces
  assert:
    that:
    - kiali_output.json | length > 0
